name: linter-tests
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: "Github environment to deploy to"
        required: true
      runner_group:
        type: string
        required: false
        default: ""
      runner_labels:
        type: string
        required: false
        default: '["ubuntu-latest"]'

defaults:
  run:
    shell: bash

jobs:
  linter-and-tests:
    runs-on: ${{ inputs.runner_group != '' && fromJSON(format('{{"group":"{0}","labels":{1}}}', inputs.runner_group, inputs.runner_labels)) || fromJSON(inputs.runner_labels) }}
    environment: ${{ inputs.environment }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Run project linter
        run: if [ -f "./cli/lint.sh" ]; then chmod +x ./cli/lint.sh; ./cli/lint.sh --cicd; else echo "No lint.sh file found."; fi
      
      - name: Run unit tests
        run: if [ -f "./cli/test.sh" ]; then chmod +x ./cli/test.sh; ./cli/test.sh --unit --cicd; else echo "No test.sh file found."; fi

      - name: Run integration tests
        env:
          ${{ insert }}: ${{ vars }}
          ${{ insert }}: ${{ secrets }}
        run: if [ -f "./cli/test.sh" ]; then chmod +x ./cli/test.sh; ./cli/test.sh --integration --cicd; else echo "No test.sh file found."; fi

      - name: Run E2E tests
        env:
          ${{ insert }}: ${{ vars }}
          ${{ insert }}: ${{ secrets }}
        run: if [ -f "./cli/test.sh" ]; then chmod +x ./cli/test.sh; ./cli/test.sh --e2e --cicd; else echo "No test.sh file found."; fi

      - name: Run test coverage
        env:
          TEST_COVERAGE_DIR_PATH: ${{ vars.TEST_COVERAGE_DIR_PATH }}
          TEST_COVERAGE_FILE_NAME: ${{ vars.TEST_COVERAGE_FILE_NAME }}
        run: if [ -f "./cli/coverage.sh" ]; then chmod +x ./cli/coverage.sh; ./cli/coverage.sh --cicd; else echo "No coverage.sh file found."; fi

      - name: Detect if an external static analysis tool is configured
        id: detect-static-analysis-tool
        run: >-
          if [ -n "${{ secrets.EXTERNAL_STATIC_ANALYSIS_TOKEN }}" ]; then
            echo "External static code analysis token is set"
            echo "has_external_tool=true" >> $GITHUB_OUTPUT
          else
            echo "External static code analysis token is NOT set"
            echo "has_external_tool=false" >> $GITHUB_OUTPUT
          fi

      - name: External static analysis
        if: ${{ steps.detect-static-analysis-tool.outputs.has_external_tool == 'true' }}
        env:
          EXTERNAL_STATIC_ANALYSIS_TOKEN: ${{ secrets.EXTERNAL_STATIC_ANALYSIS_TOKEN }}
          EXTERNAL_STATIC_ANALYSIS_PROJ_KEY: ${{ vars.EXTERNAL_STATIC_ANALYSIS_PROJ_KEY }}
          EXTERNAL_STATIC_ANALYSIS_ORG: ${{ vars.EXTERNAL_STATIC_ANALYSIS_ORG }}
          EXTERNAL_STATIC_ANALYSIS_HOST: ${{ vars.EXTERNAL_STATIC_ANALYSIS_HOST }}
          TEST_COVERAGE_DIR_PATH: ${{ vars.TEST_COVERAGE_DIR_PATH }}
          TEST_COVERAGE_FILE_NAME: ${{ vars.TEST_COVERAGE_FILE_NAME }}
        run: if [ -f "./cli/external_static_analysis.sh" ]; then chmod +x ./cli/external_static_analysis.sh; ./cli/external_static_analysis.sh --cicd; else echo "No external_static_analysis.sh file found."; fi
